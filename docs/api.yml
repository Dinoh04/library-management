# @format

openapi: 3.0.3
info:
  title: Library API
  version: 1.4.1
  description: STD22040
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPagination"
        - $ref: "#/components/parameters/PathPagination"

      responses:
        200:
          $ref: '#/components/responses/Booklist_200'
        400:
          $ref : '#/components/responses/400'
        403:
          $ref : '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'


  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Assign an Author to a book
      operationId: assignAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: Id of book to be updated
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of the author to be assigned to the book
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Booklist_200'
        400:
          $ref : '#/components/responses/400'
        403:
          $ref : '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'


  /authors/name:
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "Author"
      summary: Get all authors or filter by name
      description: Retrieve a list of authors, optionally filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/QueryPagination"
        - $ref: "#/components/parameters/PathPagination"
      responses:
       200:
          $ref: '#/components/responses/Authorlist_200'
       400:
          $ref : '#/components/responses/400'
       403:
          $ref : '#/components/responses/403'
       500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "Author"
      summary: Create or update an author
      operationId: createOrUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      
      responses:
       200:
          $ref: '#/components/responses/Authorlist_200'
       400:
          $ref : '#/components/responses/400'
       403:
          $ref : '#/components/responses/403'
       500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      tags:
        - "Books"
      summary: Import books from Excel file
      operationId: importBooks
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary

      responses:
         200:
          $ref: '#/components/responses/Booklist_200'
         400:
          $ref : '#/components/responses/400'
         403:
          $ref : '#/components/responses/403'
         500:
          $ref: '#/components/responses/500'
      security:
        - oauth2: [admin]
  /books/import/:
    post:
      tags:
        - "Books"
      summary: Import books from JSON file
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          $ref: '#/components/responses/Booklist_200'
      security:
        - oauth2: [admin]
    delete:
      tags:
        - "Author"
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
        400:
          $ref : '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'


      security:
        - oauth2: [admin]
  /authors/import:
    post:
      tags:
        - "Author"
      summary: Import authors
      operationId: importAuthors
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary
                jsonFile:
                  type: string
                  format: binary
      responses:
         200:
          $ref: '#/components/responses/Authorlist_200'
         400:
          $ref : '#/components/responses/400'
         403:
          $ref : '#/components/responses/403'
         500:
          $ref: '#/components/responses/500'
      security:
        - oauth2: [admin]
  /Visitors/:
    get:
      tags:
        - "Visitors"
      summary: Get the list of all  visitors
      responses:
        200:
          description: Visitor successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visitors"

  /visitors/{visitorID}/borrowings:
    get:
      tags:
        - "Visitors"
      summary: Recover loans made by a visitor
      parameters:
        - name: visitorID
          in: path
          required: true
          description: Id of the visitor
          schema:
            type: integer
      responses:
        200:
          description: List of loans made by the visitor successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Borrowing"

  /visitors/{visitorID}/activities:
    get:
      tags:
        - "Visitors"
      summary: Retrieve visitor activities during a specified period
      parameters:
        - name: visitorID
          in: path
          required: true
          description: The unique identifier of the visitor.
          schema:
            type: integer
        - name: startDate
          in: query
          required: true
          description: Start date of the desired period.
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          description: End date of the desired period.
          schema:
            type: string
            format: date
      responses:
         200:
          $ref: '#/components/responses/Visitorslist_200'
         400:
          $ref : '#/components/responses/400'
         403:
          $ref : '#/components/responses/403'
         500:
          $ref: '#/components/responses/500'
                     

  /books/borrowed:
    get:
      tags:
        - "Books"
      summary: Get all the book loaned
      responses:
        200:
          $ref: '#/components/responses/Booklist_200'

  /books/available:
    get:
      tags:
        - "Books"
      summary: Get all the book available
      responses:
        200:
          description: List of book available retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrupdateBook"

  /Borrow/:
    post:
      tags:
        - "Borrow"
      summary: Create a new loan
      operationId: createBorrowing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Borrowing"
      responses:
        201:
          description: Loan created  successfully
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Borrowing"
      security:
        - oauth2: [admin]
    get:
      tags:
        - "Borrow"
      summary: Get the list of all  visitors
      responses:
        200:
          description: List of loan successfully retrieved
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Borrowing"

  /borrowings/{borrowingID}:
    put:
      tags:
        - "Borrow"
      summary: Upadate a loan
      parameters:
        - name: borrowingID
          in: path
          required: true
          description: The id of loan to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                returnDate:
                  type: string
                  format: date
                  description: The book's return date
      responses:
        200:
          description: Loan update successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Borrowing"

    delete:
      tags:
        - "Borrow"
      summary: Delete a loan
      parameters:
        - name: borrowingID
          in: path
          required: true
          description: The id of loan to delete
          schema:
            type: integer
      responses:
        204:
          description: Loan deleted successfully

components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
      properties:
        file_type:
          enum:
            - JSON
            - Excel

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"

        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        availibility:
          type: boolean
          description: Show if the book is "available" or "Borrow"
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
    Visitors:
      type: object
      properties:
        IdVisitor:
          type: integer
          description: The id of the visitor or borrower
        name:
          type: string
        reference:
          type: string
        borrowings:
          type: array
          items:
            $ref: "#/components/schemas/Borrowing"
    Borrowing:
      type: object
      properties:
        borrowingId:
          type: integer
          description: The id of the borrow
        IdVisitor:
          type: integer
          description: The id of the visitor or borrower
        bookId:
          type: integer
        borroweddate:
          type: string
          format: date
          description: date of the book borrow
        returnDate:
          type: string
          format: date
          description: The expected date of return of the book
     
    ResponseStatus:
        type: object
        properties:
          code: 
            type: integer
            example: 200
          message:
            type: string
    ResponseBodyTemplate:
        type: object
        properties:
          status:
            $ref: '#/components/schemas/ResponseStatus'
          body:
            type: object
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST 
          body: { }
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
          body: { }
    ErrorServorBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Eternal servor error
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
             type: array
             items:
                $ref: '#/components/schemas/Book'
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
             type: array
             items:
                $ref: '#/components/schemas/Author'
    VisitorsListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
             type: array
             items:
                $ref: '#/components/schemas/Visitors'



  parameters:
    QueryPagination:
      in: query
      name: queryPagination
      description: Page number for pagination default 1
      required: false
      schema:
        type: integer
        default: 1
    PathPagination:
      in: query
      name: pathPagination
      description: Number of item in page default 50
      required: false
      schema:
        type: integer
        default: 50
    

  responses:
   Booklist_200:
     description: List of books
     content:
        application/json:
           schema:
              $ref : '#/components/schemas/BookListBody'
   Authorlist_200:
     description: List of author
     content:
        application/json:
           schema:
              $ref : '#/components/schemas/AuthorListBody'
   Visitorslist_200:
     description: List of author
     content:
        application/json:
           schema:
              $ref : '#/components/schemas/VisitorsListBody'
   200:
       description: successfully
       content:
         application/json:
          schema:
             $ref: '#/components/responses/200'
   400:
       description: Bad request 
       content:
        application/json:
         schema:
           $ref: '#/components/schemas/BadRequestBody'
   403:
       description: FORBIDDEN
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/ForbiddenBody'
   500:
      description: ETERNAL SERVOR ERROR
      content:
        application/json:
          schema:
              $ref: '#/components/schemas/ErrorServorBody'
      
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
