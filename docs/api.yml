# @format

openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22040
servers:
  - url: https://library.com
paths:
  
  /books:

    get:
      tags:
       - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
       

        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateRange
          description: "Filter books by releaseDate within a date range (format: YYYY-MM-DD to YYYY-MM-DD)"
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: "Page number for pagination default: 1"
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Number of the pageSize default: 50"
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    



  /books/{bookId}/authors/{authorId}:
    
    
    put:
      tags:
        - "Books"
      summary: Assign an Author to a book
      operationId: assignAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: Id of book to be updated
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of the author to be assigned to the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author assigned to the book successfully
          content:
            application/json:
             schema:
              $ref: "#/components/schemas/Book"

   
  /authors/name:
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
       - "Author"
      summary: Get all authors or filter by name
      description: Retrieve a list of authors, optionally filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
     
        - in: query
          name: page
          description: "Page number for pagination (default: 1)"
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Number of items per page (default: 50)"
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      tags:
       - "Author"
      summary: Create or update an author
      operationId: createOrUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
    delete:
      tags:
       - "Author"
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
components:
  schemas:
    Book:
      type: object

      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          $ref : '#/components/schemas/Author'

        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string


      

      