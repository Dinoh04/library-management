# @format

openapi: 3.0.3
info:
  title: Library API
  version: 1.4.0
  description: STD22040
servers:
  - url: https://library.com
paths:
  
  /books:

    get:
      tags:
       - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPagination'
        - $ref: '#/components/parameters/PathPagination'

      
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        403:
          description: Can't acces with the data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"

    



  /books/{bookId}/authors/{authorId}:
    
    
    put:
      tags:
        - "Books"
      summary: Assign an Author to a book
      operationId: assignAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: Id of book to be updated
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of the author to be assigned to the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author assigned to the book successfully
          content:
            application/json:
              schema:
               allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        403:
          description: Can't acces with the data
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Book"


   
  /authors/name:
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
       - "Author"
      summary: Get all authors or filter by name
      description: Retrieve a list of authors, optionally filtered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPagination'
        - $ref: '#/components/parameters/PathPagination'
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        403:
          description: Can't acces with the data
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
    put:
      tags:
       - "Author"
      summary: Create or update an author
      operationId: createOrUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The created or updated author
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        403:
          description: Can't acces with the data
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
  /books/import:
   post:
    tags:
      - "Books"
    summary: Import books from Excel file
    operationId: importBooks
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              excelFile:
                type: string
                format: binary
  
    responses:
      200:
        description: List of imported books
        content:
          application/json:
            schema:
              allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
  /books/import/:
   post:
    tags:
      - "Books"
    summary: Import books from JSON file
    operationId: importBooks
    requestBody:
      content:
          application/json:
            schema:
             type: array
             items:
              $ref: "#/components/schemas/Book"
  
    responses:
      200:
        description: List of imported books
        content:
          application/json:
            schema:
              allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
                    
   

   delete:
      tags:
       - "Author"
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                 allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                  allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                       $ref: "#/components/schemas/Author"

    
  /authors/import:
   post:
    tags:
      - "Author"
    summary: Import authors
    operationId: importAuthors
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              excelFile:
                type: string
                format: binary
              jsonFile:
                type: string
                format: binary
    responses:
      200:
        description: List of imported authors
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
  

  /Visitors/:
    
    get: 
     tags:
        - "Visitors"
     summary: Get the list of all  visitors
     responses:
       200:
        description: Visitor successfully retrieved 
        content:
            application/json:
             schema:
              type: array
              items: 
                $ref: "#/components/schemas/Visitors"

  /visitors/{visitorID}/borrowings:
    
    get: 
     tags:
        - "Visitors"
     summary: Recover loans made by a visitor
     parameters:
      - name: visitorID
        in: path
        required: true
        description: Id of the visitor
        schema:
          type: integer
     responses:
        200:
         description: List of loans made by the visitor successfully retrieved
         content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Borrowing'


  /visitors/{visitorID}/activities:

   get:
    summary: Retrieve visitor activities during a specified period
    parameters:
      - name: visitorID
        in: path
        required: true
        description: The unique identifier of the visitor.
        schema:
          type: integer
      - name: startDate
        in: query
        required: true
        description: Start date of the desired period.
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        required: true
        description: End date of the desired period.
        schema:
          type: string
          format: date
    responses:
      200:
        description: List of visitor activities during the specified period retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                borrowings:
                  type: array
                  items:
                    $ref: '#/components/schemas/Borrowing'
                returns:
                  type: array
                  items:
                    $ref: '#/components/schemas/Borrowing'

 


   
    
  /books/borrowed:
   
    get:
      tags:
       - "Books"
      summary: Get all the book loaned
      responses:
        200:
         description: Book loaned retrieved successfully
         content:
           application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"

  /books/available:
  
     get:
        tags:
          - "Books"
        summary: Get all the book available
        responses:
          200:
           description: List of book available retrieved successfully
           content:
             application/json:
              schema:
               type: array
               items:
                $ref: '#/components/schemas/CrupdateBook'

  

  /Borrow/:
      

    post:
     tags:
       - "Borrow"
     summary: Create a new loan
     operationId: createBorrowing
     requestBody:
        content:
          application/json:
           schema:
              $ref: "#/components/schemas/Borrowing"
     responses:
       201:
         description: Loan created  successfully
         content:
           application/json:
               schema:
                  type: array
                  $ref: "#/components/schemas/Borrowing"     

    get:
     tags:
       - "Borrow"
     summary:  Get the list of all  visitors
     responses:
      200:
        description: List of loan successfully retrieved
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Borrowing'

  /borrowings/{borrowingID}:
   put:
    tags:
       - "Borrow"
    summary: Upadate a loan 
    parameters:
      - name: borrowingID
        in: path
        required: true
        description: The id of loan to update
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              returnDate:
                type: string
                format: date
                description: The book's return date
    responses:
      200:
        description:  Loan update successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrowing'

   delete:
    tags:
      - "Borrow"
    summary: Delete a loan
    parameters:
      - name: borrowingID
        in: path
        required: true
        description: The id of loan to delete
        schema:
          type: integer
    responses:
      204:
        description: Loan deleted successfully


components:
  schemas:
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
      properties:
          file_type:
              enum:
                - JSON
                - Excel

            
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          $ref : '#/components/schemas/Author'

        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
        releaseDate:
          type: string
          format: date
        availibility:
          type: boolean
          description: Show if the book is "available" or "Borrow"  
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
    Visitors:
      type: object
      properties:
        IdVisitor:
            type: integer
            description: The id of the visitor or borrower
        name: 
            type: string
        reference:
            type: string
        borrowings:
          type: array
          items:
            $ref: '#/components/schemas/Borrowing'
    Borrowing:
        type: object
        properties:
          borrowingId:
            type: integer
            description: The id of the borrow
          IdVisitor:
            type: integer
            description: The id of the visitor or borrower
          bookId:
            type: integer
          borroweddate:
            type: string
            format: date
            description: date of the book borrow
          returnDate:
              type: string
              format: date
              description: The expected date of return of the book



        
  parameters:
    QueryPagination:
      in : query
      name: queryPagination
      description: Page number for pagination default 1 
      required: false
      schema:
        type: integer
        default: 1
    PathPagination:
      in: query
      name: pathPagination
      description: Number of item in page default 50
      required: false
      schema:
        type: integer
        default: 50

  responses:
    CommonResponse:
      description: joint response
      content:
        application/json:
          schema:
            type: array
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object  

      

      

